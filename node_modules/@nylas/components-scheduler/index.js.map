{"version":3,"file":"index.js","sources":["../../commons/src/define-component-patch.ts","../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../commons/src/store/error.ts","../../commons/src/methods/api.ts","../../commons/src/connections/events.ts","../../commons/src/connections/threads.ts","../../commons/src/connections/manifest.ts","../../commons/src/connections/messages.ts","../../commons/src/connections/availability.ts","../../commons/src/store/availability.ts","../../commons/src/store/mailbox.ts","../../commons/src/store/manifest.ts","../../commons/src/methods/component.ts","../../commons/src/components/NError.svelte","../../commons/src/constants/custom-fields.ts","../../commons/src/enums/Scheduler.ts","src/Scheduler.svelte"],"sourcesContent":["export const originalDefine = window.customElements.define.bind(\n  window.customElements,\n);\nwindow.customElements.define = (name: string, ...args) => {\n  if (customElements.get(name)) {\n    return;\n  }\n  return originalDefine(name, ...args);\n};\n","function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.2' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { Writable, writable } from \"svelte/store\";\nimport type { Manifest } from \"@commons/types/Nylas\";\n\ntype ErrorStore = Record<string, Manifest[\"error\"]>;\n\nfunction initialize(): Writable<ErrorStore> {\n  return writable({});\n}\n\nexport const ErrorStore = initialize();\n","import { ErrorStore } from \"../store/error\";\nimport type { Manifest } from \"@commons/types/Nylas\";\n\nexport async function handleResponse<T = unknown>(\n  response: Response,\n): Promise<T> {\n  if (!response.ok) {\n    const passedError = await response\n      .json()\n      .then((json: { message: string; name: string }) => json);\n    const error = new Error(passedError.message);\n    error.name = passedError.name;\n    return Promise.reject({ message: error, statusCode: response.status });\n  }\n  return response.json();\n}\n\ntype HTTPMethod = \"POST\" | \"GET\" | \"PUT\" | \"PATCH\" | \"OPTIONS\" | undefined;\n\ntype FetchOptions = {\n  body?: unknown;\n  method?: HTTPMethod;\n  component_id?: string;\n  access_token?: string;\n};\n\nexport function getFetchConfig(\n  opts: FetchOptions = { component_id: \"\" },\n): RequestInit {\n  return {\n    method: opts.method || \"GET\", // GET is default method\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-Component-Id\": opts.component_id || \"\", // Component ID is passed as header\n      \"X-Access-Token\": opts.access_token || \"\", // Access Token is passed as header\n    },\n    body: opts.body ? JSON.stringify(opts.body) : undefined,\n  };\n}\n\nexport function handleError(id: string, error: Manifest[\"error\"]): never {\n  if (process.env.NODE_ENV !== \"production\") console.error(error);\n  ErrorStore.update((errorMap) => ({ ...errorMap, [id]: error }));\n  throw error;\n}\n\nconst REGION_MAPPING: Record<string, string> = {\n  \"001\": \"\", // US\n  \"002\": \"ireland-\", // EU\n  \"003\": \"canada-\", // Canada\n};\n\nexport function getMiddlewareApiUrl(id: string): string {\n  let region = \"\";\n  if (id.substring(3, 4) === \"-\") {\n    const code = id.substring(0, 3);\n    if (typeof REGION_MAPPING[code] !== \"undefined\") {\n      region = REGION_MAPPING[code];\n    }\n  }\n  const API_GATEWAY = `https://${region}${process.env.API_GATEWAY}`;\n  return API_GATEWAY;\n}\n\nexport function silence(error: Error) {}\n","import {\n  getFetchConfig,\n  handleError,\n  handleResponse,\n  getMiddlewareApiUrl,\n} from \"../methods/api\";\nimport type { MiddlewareResponse } from \"@commons/types/Nylas\";\nimport type {\n  EventQuery,\n  Event,\n  CalendarQuery,\n  Calendar,\n} from \"@commons/types/Events\";\n\nexport const fetchEvents = async (query: EventQuery): Promise<Event[]> => {\n  return Promise.all(\n    query.calendarIDs.map((calendar) => {\n      return fetch(\n        `${getMiddlewareApiUrl(\n          query.component_id || \"\",\n        )}/agenda/events?calendar_id=${calendar}&starts_after=${query.starts_after - 1\n        }&ends_before=${query.ends_before}&expand_recurring=true`,\n        getFetchConfig({\n          component_id: query.component_id,\n          access_token: query.access_token,\n        }),\n      )\n        .then((response) =>\n          handleResponse<MiddlewareResponse<Event[]>>(response),\n        )\n        .then((json) => {\n          return json.response;\n        });\n    }),\n  )\n    .then((responses) => {\n      return responses.flat();\n    })\n    .catch((error) => handleError(query.component_id || \"unknown\", error));\n};\n\nexport const fetchCalendars = async (\n  query: CalendarQuery,\n): Promise<Calendar[]> => {\n  if (query.calendarIDs.length) {\n    return Promise.allSettled(\n      query.calendarIDs.map((calendar: unknown) => {\n        return fetch(\n          `${getMiddlewareApiUrl(\n            query.component_id || \"\",\n          )}/calendars/${calendar}`,\n          getFetchConfig({\n            component_id: query.component_id,\n            access_token: query.access_token,\n          }),\n        )\n          .then((response) =>\n            handleResponse<MiddlewareResponse<Calendar[]>>(\n              response,\n            ),\n          )\n          .then((json) => {\n            return json.response;\n          });\n      }),\n    )\n      .then((responses) => {\n        const filteredResponses = responses\n          .filter(\n            (response): response is PromiseFulfilledResult<Calendar[]> =>\n              response.status === \"fulfilled\",\n          )\n          .map((cal) => cal.value);\n        return filteredResponses.flat();\n      })\n      .catch((error) => handleError(query.component_id || \"unknown\", error));\n  } else {\n    return fetch(\n      `${getMiddlewareApiUrl(query.component_id || \"\")}/calendars`,\n      getFetchConfig({\n        component_id: query.component_id,\n        access_token: query.access_token,\n      }),\n    )\n      .then((response) =>\n        handleResponse<MiddlewareResponse<Calendar[]>>(response),\n      )\n      .then((json) => {\n        return json.response;\n      });\n  }\n};\n\nexport async function createEvent(\n  event: Event,\n  query: EventQuery,\n): Promise<Event> {\n  return fetch(\n    `${getMiddlewareApiUrl(query.component_id || \"\")}/agenda/events`,\n    getFetchConfig({\n      method: \"POST\",\n      component_id: query.component_id,\n      access_token: query.access_token,\n      body: event,\n    }),\n  )\n    .then((response) => handleResponse<MiddlewareResponse<Event>>(response))\n    .then((json) => {\n      return json.response;\n    });\n}\n","import {\n  getFetchConfig,\n  handleError,\n  handleResponse,\n  getMiddlewareApiUrl,\n} from \"../methods/api\";\nimport type {\n  MailboxQuery,\n  Thread,\n  ConversationQuery,\n  Conversation,\n  MiddlewareResponse,\n} from \"@commons/types/Nylas\";\n\nexport const fetchThreads = (\n  query: MailboxQuery,\n  offset: number,\n  limit: number,\n): Promise<Thread[]> => {\n  let queryString = `${getMiddlewareApiUrl(\n    query.component_id,\n  )}/threads?view=expanded&not_in=trash&limit=${limit}&offset=${offset}`;\n  if (query.query) {\n    Object.entries(query.query).forEach(\n      (param) => (queryString = queryString.concat(`&${param[0]}=${param[1]}`)),\n    );\n  }\n  return fetch(queryString, getFetchConfig(query))\n    .then((response) => handleResponse<MiddlewareResponse<Thread[]>>(response))\n    .then((json) => json.response)\n    .catch((error) => handleError(query.component_id, error));\n};\n\nexport function fetchThreadCount(query: MailboxQuery): Promise<number> {\n  let queryString = `${getMiddlewareApiUrl(\n    query.component_id,\n  )}/threads?view=expanded&not_in=trash&view=count`;\n  if (query.query) {\n    Object.entries(query.query).forEach(\n      (param) => (queryString = queryString.concat(`&${param[0]}=${param[1]}`)),\n    );\n  }\n\n  if (query.keywordToSearch) {\n    queryString += `&q=${query.keywordToSearch}`;\n  }\n\n  return fetch(queryString, getFetchConfig(query))\n    .then((response) => handleResponse<MiddlewareResponse<any>>(response))\n    .then((json) => json.response.count);\n}\n\nexport const fetchSearchResultThreads = (\n  query: MailboxQuery,\n): Promise<Thread[]> => {\n  const queryString = `${getMiddlewareApiUrl(\n    query.component_id,\n  )}/threads/search?q=${query.keywordToSearch}&view=expanded`;\n\n  return fetch(queryString, getFetchConfig(query))\n    .then(async (response) =>\n      handleResponse<MiddlewareResponse<Thread[]>>(response),\n    )\n    .then((json) => json.response)\n    .catch((error) => handleError(query.component_id, error));\n};\n\nexport const fetchThread = async (\n  query: ConversationQuery,\n): Promise<Conversation> => {\n  const thread = await fetch(\n    `${getMiddlewareApiUrl(query.component_id)}/threads/${\n      query.thread_id\n    }?view=expanded`,\n    getFetchConfig({\n      component_id: query.component_id,\n      access_token: query.access_token,\n    }),\n  )\n    .then((response) =>\n      handleResponse<MiddlewareResponse<Conversation>>(response),\n    )\n    .then((json) => json.response)\n    .catch((error) => handleError(query.component_id, error));\n\n  return thread;\n};\n\nexport const updateThread = (\n  query: ConversationQuery,\n  updatedThread: Conversation,\n): Promise<Conversation> => {\n  // accepts unread, starred, folder_id + label_ids. developer.nylas.com/docs/api/#put/threads/id\n  return fetch(\n    `${getMiddlewareApiUrl(query.component_id)}/threads/${updatedThread.id}`,\n    getFetchConfig({\n      method: \"PUT\",\n      component_id: query.component_id,\n      access_token: query.access_token,\n      body: {\n        unread: updatedThread.unread,\n        starred: updatedThread.starred,\n        folder_id: updatedThread.folder_id,\n        label_ids: updatedThread.label_ids,\n      },\n    }),\n  )\n    .then((response) =>\n      handleResponse<MiddlewareResponse<Conversation>>(response),\n    )\n    .then((json) => json.response)\n    .catch((error) => handleError(query.component_id, error));\n};\n","import {\n  getFetchConfig,\n  handleError,\n  handleResponse,\n  getMiddlewareApiUrl,\n} from \"../methods/api\";\nimport type { Manifest, MiddlewareResponse } from \"@commons/types/Nylas\";\n\nexport const fetchManifest = async (\n  id: string,\n  access_token?: string,\n): Promise<Manifest> => {\n  return await fetch(\n    `${getMiddlewareApiUrl(id)}/manifest`,\n    getFetchConfig({\n      access_token,\n      component_id: id,\n    }),\n  )\n    .then<MiddlewareResponse>(handleResponse)\n    .then((response) => response.component.theming)\n    .catch((error) => handleError(id, error));\n};\n\n// Allows <nylas-schedule-editor> to modify its own properties\n\ninterface saveManifestParams {\n  id: string;\n  access_token?: string;\n  manifest: Manifest;\n}\n\nexport const saveManifest = async (\n  params: saveManifestParams\n): Promise<Manifest> => {\n  const { id, access_token, manifest } = params;\n  return fetch(\n    `${getMiddlewareApiUrl(id)}/component`,\n    getFetchConfig({\n      method: \"PUT\",\n      component_id: id,\n      access_token,\n      body: manifest,\n    }),\n  )\n    .then((response) => handleResponse<MiddlewareResponse<Manifest>>(response))\n    .then((json) => {\n      return json.response;\n    });\n}\n","import { MessageStore } from \"../store/messages\";\nimport {\n  getFetchConfig,\n  handleError,\n  handleResponse,\n  getMiddlewareApiUrl,\n} from \"../methods/api\";\nimport type {\n  SingularEmail,\n  CommonQuery,\n  MessagesQuery,\n  File as NylasFile,\n  Message as NylasMessage,\n  MiddlewareResponse,\n} from \"@commons/types/Nylas\";\nimport type { Message } from \"@commons/types/Composer\";\n\nexport const sendMessage = async (\n  component_id: string,\n  msg: Message,\n  access_token?: string,\n): Promise<NylasMessage> => {\n  return await fetch(\n    `${getMiddlewareApiUrl(component_id)}/send`,\n    getFetchConfig({ method: \"POST\", component_id, access_token, body: msg }),\n  )\n    .then((response) =>\n      handleResponse<MiddlewareResponse<NylasMessage>>(response),\n    )\n    .then((json) => {\n      return json.response;\n    })\n    .catch((error) => handleError(component_id, error));\n};\n\nexport const uploadFile = async (\n  component_id: string,\n  file: File,\n  access_token?: string,\n): Promise<NylasFile> => {\n  const fetchConfig: RequestInit = getFetchConfig({\n    method: \"POST\",\n    component_id,\n    access_token,\n  });\n  const form = new FormData();\n  form.append(\"file\", file);\n  if (\n    typeof fetchConfig.headers !== \"undefined\" &&\n    \"Content-Type\" in fetchConfig.headers\n  ) {\n    delete fetchConfig.headers[\"Content-Type\"];\n  }\n  fetchConfig.body = form;\n  return await fetch(`${getMiddlewareApiUrl(component_id)}/files`, fetchConfig)\n    .then((response) => handleResponse<MiddlewareResponse<NylasFile>>(response))\n    .then((json) => {\n      return Array.isArray(json.response) ? json.response[0] : json.response;\n    })\n    .catch(handleError.bind(0, component_id));\n};\n\nexport const fetchMessages = async (\n  query: MessagesQuery,\n  offset: number,\n  limit: number,\n): Promise<NylasMessage[]> => {\n  let queryString = `${getMiddlewareApiUrl(\n    query.component_id,\n  )}/messages?offset=${offset}&limit=${limit}`;\n  if (query.received_before) {\n    queryString = `${queryString}&received_before=${query.received_before}`;\n  }\n  if (query.received_after) {\n    queryString = `${queryString}&received_after=${query.received_after}`;\n  }\n  return await fetch(queryString, getFetchConfig(query))\n    .then((response) =>\n      handleResponse<MiddlewareResponse<NylasMessage[]>>(response),\n    )\n    .then((json) => {\n      MessageStore.addMessages({\n        queryKey: JSON.stringify(query),\n        data: json.response,\n      });\n      return json.response;\n    })\n    .catch((error) => handleError(query.component_id, error));\n};\n\nexport const fetchMessage = async (\n  query: CommonQuery,\n  messageID: string,\n): Promise<NylasMessage> => {\n  const queryString = `${getMiddlewareApiUrl(\n    query.component_id,\n  )}/messages/${messageID}`;\n  return await fetch(queryString, getFetchConfig(query))\n    .then((response) =>\n      handleResponse<MiddlewareResponse<NylasMessage>>(response),\n    )\n    .then((json) => {\n      return json.response;\n    })\n    .catch((error) => handleError(query.component_id, error));\n};\n\n// For cases when someone wants to show just a single email message, rather than the full thread and w/o passing a thread id\nexport const fetchEmail = async (\n  query: SingularEmail,\n): Promise<NylasMessage> => {\n  const queryString = `${getMiddlewareApiUrl(query.component_id)}/messages/${\n    query.message_id\n  }`;\n  return await fetch(queryString, getFetchConfig(query))\n    .then((response) =>\n      handleResponse<MiddlewareResponse<NylasMessage>>(response),\n    )\n    .then((json) => {\n      return json.response;\n    })\n    .catch((error) => handleError(query.component_id, error));\n};\n","import {\n  getFetchConfig,\n  handleError,\n  handleResponse,\n  getMiddlewareApiUrl,\n} from \"../methods/api\";\nimport type {\n  AvailabilityQuery,\n  AvailabilityResponse,\n  FreeBusyResponse,\n  TimeSlot,\n} from \"@commons/types/Availability\";\nimport type { MiddlewareResponse } from \"@commons/types/Nylas\";\n\n// TODO: deprecate if we find /calendars/availability to be fully sufficient\nexport const fetchFreeBusy = async (\n  query: AvailabilityQuery,\n): Promise<FreeBusyResponse[]> => {\n  return fetch(\n    `${getMiddlewareApiUrl(query.component_id)}/calendars/free-busy`,\n    getFetchConfig({\n      method: \"POST\",\n      component_id: query.component_id,\n      access_token: query.access_token,\n      body: query.body,\n    }),\n  )\n    .then(async (apiResponse) => {\n      const json = await handleResponse<MiddlewareResponse<FreeBusyResponse[]>>(\n        apiResponse,\n      );\n      return json.response;\n    })\n    .catch((error) => handleError(query.component_id, error));\n};\n\nexport const fetchAvailability = async (\n  query: AvailabilityQuery,\n): Promise<AvailabilityResponse> => {\n  return fetch(\n    `${getMiddlewareApiUrl(query.component_id)}/calendars/availability`,\n    getFetchConfig({\n      method: \"POST\",\n      component_id: query.component_id,\n      access_token: query.access_token,\n      body: query.body,\n    }),\n  )\n    .then(async (apiResponse) => {\n      const json = await handleResponse<\n        MiddlewareResponse<AvailabilityResponse>\n      >(apiResponse);\n      // Normalize response .start and .end to .start_time and .end_time to make up for discrependcy in the Nylas API: https://developer.nylas.com/docs/connectivity/calendar/calendar-availability/#availability-response\n      // API story: https://app.shortcut.com/nylas/story/73196/\n      json.response.time_slots = json.response.time_slots.map((slot) => {\n        slot.start_time = slot.start || 0;\n        slot.end_time = slot.end || 0;\n        delete slot.start;\n        delete slot.end;\n        return slot;\n      });\n      return json.response;\n    })\n    .catch((error) => handleError(query.component_id, error));\n};\n","import { Writable, writable } from \"svelte/store\";\nimport { fetchAvailability } from \"../connections/availability\";\nimport type {\n  AvailabilityQuery,\n  AvailabilityResponse,\n} from \"@commons/types/Availability\";\n\ntype AvailabilityStore = Record<string, Promise<AvailabilityResponse>>;\n\nfunction initialize(): Writable<AvailabilityStore> {\n  const get = (\n    target: AvailabilityStore,\n    key: string,\n  ): Promise<AvailabilityResponse> | void => {\n    const accessor: AvailabilityQuery = JSON.parse(key);\n    // Avoid saving forceReload property as part of store key\n    const accessorCopy = { ...accessor };\n    delete accessorCopy.forceReload;\n    key = JSON.stringify(accessorCopy);\n\n    if (\n      !accessor.component_id ||\n      !accessor?.body?.start_time ||\n      !accessor?.body?.end_time\n    ) {\n      return;\n    }\n\n    if (!target[key] || accessor.forceReload) {\n      const fetchPromise = fetchAvailability(accessor);\n      store.update((store) => {\n        store[key] = fetchPromise;\n        return store;\n      });\n      target[key] = fetchPromise;\n    }\n    return target[key];\n  };\n  const store = writable(new Proxy<AvailabilityStore>({}, { get }));\n  return store;\n}\n\nexport const AvailabilityStore = initialize();\n","import { derived, Readable, writable } from \"svelte/store\";\nimport {\n  fetchThreads,\n  fetchSearchResultThreads,\n  updateThread,\n  fetchThreadCount,\n} from \"../connections/threads\";\nimport type {\n  Thread,\n  MailboxQuery,\n  ConversationQuery,\n  Message,\n  Conversation,\n} from \"@commons/types/Nylas\";\nimport { silence } from \"@commons\";\n\ninterface PaginatedThreads {\n  isLoaded: boolean;\n  threads: Thread[];\n}\n\nasync function initializePaginatedThreads(totalPages: number) {\n  const paginatedThreads = [];\n\n  for (let i = 0; i < totalPages; i++) {\n    paginatedThreads.push({\n      isLoaded: false,\n      threads: [],\n    });\n  }\n  return paginatedThreads;\n}\n\nfunction initializeThreads() {\n  const { subscribe, set, update } = writable<\n    Record<string, PaginatedThreads[]>\n  >({});\n  let threadsMap: Record<string, PaginatedThreads[]> = {};\n  let totalItems: number;\n\n  return {\n    subscribe,\n    set,\n    getThreads: async (\n      query: MailboxQuery,\n      currentPage: number,\n      pageSize: number,\n      forceRefresh = false,\n    ) => {\n      const queryKey = JSON.stringify(query);\n\n      if (!query.component_id && !query.access_token) {\n        return [];\n      }\n\n      if (totalItems === undefined || forceRefresh) {\n        const threadCount = await fetchThreadCount(query).catch(silence);\n\n        if (threadCount) {\n          totalItems = threadCount;\n        }\n      }\n\n      if (!Array.isArray(threadsMap[queryKey]) || forceRefresh) {\n        const totalPages = Math.ceil(totalItems / pageSize);\n        threadsMap[queryKey] = await initializePaginatedThreads(totalPages);\n      }\n\n      if (typeof threadsMap[queryKey][currentPage] === \"undefined\") {\n        return [];\n      } else if (!threadsMap[queryKey][currentPage].isLoaded) {\n        const threads = await fetchThreads(query, currentPage, pageSize).catch(\n          silence,\n        );\n\n        if (threads) {\n          threadsMap[queryKey][currentPage].threads = threads;\n          threadsMap[queryKey][currentPage].isLoaded = true;\n        }\n      }\n\n      update((threads) => {\n        threads[queryKey] = threadsMap[queryKey];\n        return { ...threads };\n      });\n\n      return threadsMap[queryKey][currentPage].threads;\n    },\n    getNumberOfItems: async (query: MailboxQuery) => {\n      if (!query.component_id && !query.access_token) {\n        return 0;\n      }\n\n      if (typeof totalItems === \"undefined\") {\n        const threadCount = await fetchThreadCount(query).catch(silence);\n\n        if (threadCount) {\n          totalItems = threadCount;\n        }\n      }\n      return totalItems;\n    },\n    // TODO - Use real pagination when search endpoint supports it\n    getThreadsWithSearchKeyword: async (\n      query: MailboxQuery,\n      forceRefresh = false,\n    ) => {\n      if (!query.component_id && !query.access_token) {\n        return [];\n      }\n      const queryKey = JSON.stringify(query);\n\n      if (!Array.isArray(threadsMap[queryKey]) || forceRefresh) {\n        threadsMap[queryKey] = await initializePaginatedThreads(1);\n      }\n\n      if (!threadsMap[queryKey][0].isLoaded || forceRefresh) {\n        const searchResultThreads = await fetchSearchResultThreads(query).catch(\n          silence,\n        );\n\n        if (searchResultThreads) {\n          threadsMap[queryKey][0].threads = searchResultThreads;\n          threadsMap[queryKey][0].isLoaded = true;\n        }\n      }\n      update((threads) => {\n        threads[queryKey] = threadsMap[queryKey];\n        return { ...threads };\n      });\n      return threadsMap[queryKey][0].threads;\n    },\n    updateThread: async (\n      threadQuery: ConversationQuery,\n      queryKey: string,\n      updatedThread: Conversation,\n      currentPage: number,\n      pageSize: number,\n    ) => {\n      const thread = await updateThread(threadQuery, updatedThread).catch(\n        silence,\n      );\n\n      if (!threadsMap[queryKey][currentPage].isLoaded) {\n        const threads = await fetchThreads(\n          JSON.parse(queryKey),\n          pageSize,\n          currentPage * pageSize,\n        ).catch(silence);\n\n        if (threads) {\n          threadsMap[queryKey][currentPage].threads = threads;\n          threadsMap[queryKey][currentPage].isLoaded = true;\n        }\n      }\n\n      threadsMap[queryKey][currentPage].threads = threadsMap[queryKey][\n        currentPage\n      ].threads.map((initialThread) => {\n        if (thread && initialThread.id === thread.id) {\n          initialThread = Object.assign(initialThread, thread);\n        }\n        return initialThread;\n      });\n      update((threads) => {\n        threads[queryKey] = threadsMap[queryKey];\n        return { ...threads };\n      });\n      return threadsMap[queryKey][currentPage].threads;\n    },\n    updateThreadSelection: (\n      queryKey: string,\n      currentPage: number,\n      threadId?: string,\n    ) => {\n      const threads = threadsMap[queryKey][currentPage].threads;\n\n      if (!threadId) {\n        const selectionState = threads.some((thread) => thread.selected);\n        for (const thread of threads) {\n          thread.selected = !selectionState;\n        }\n      } else {\n        const thread = threads.find((thread) => thread.id === threadId);\n        if (thread) {\n          thread.selected = !thread.selected;\n        }\n      }\n      update((threads) => {\n        threads[queryKey] = threadsMap[queryKey];\n        return { ...threads };\n      });\n      return threadsMap[queryKey][currentPage].threads;\n    },\n\n    reset: () => {\n      threadsMap = {};\n      set({});\n    },\n\n    hydrateMessageInThread: (\n      incomingMessage: Message,\n      query: MailboxQuery,\n      currentPage: number,\n    ) => {\n      const queryKey = JSON.stringify(query);\n\n      const foundThread = threadsMap[queryKey][currentPage]?.threads?.find(\n        (thread) => thread.id === incomingMessage.thread_id,\n      );\n      if (foundThread) {\n        const foundMessage = foundThread.messages?.find(\n          (message) => message.id === incomingMessage.id,\n        );\n        if (foundMessage) {\n          foundMessage.body = incomingMessage.body;\n          update((threads) => {\n            if (incomingMessage.thread_id) {\n              let threadToUpdate = threads[queryKey][currentPage].threads.find(\n                (thread) => thread.id === foundThread.id,\n              );\n\n              if (threadToUpdate) {\n                threadToUpdate = JSON.parse(JSON.stringify(foundThread));\n              }\n            }\n            return { ...threads };\n          });\n        }\n      }\n\n      return threadsMap[queryKey][currentPage].threads;\n    },\n  };\n}\n\nexport const MailboxStore = initializeThreads();\n\nexport const EmailStore: Readable<Record<string, Thread[]>> = derived(\n  MailboxStore,\n  ($MailboxStore) => {\n    const emailStore: Record<string, Thread[]> = {};\n    Object.entries($MailboxStore).forEach(\n      ([key, paginatedThreads]) =>\n        (emailStore[key] = paginatedThreads\n          .map((paginatedThread) => paginatedThread.threads)\n          .flat()),\n    );\n    return emailStore;\n  },\n);\n","import { fetchManifest } from \"../connections/manifest\";\nimport { Writable, writable } from \"svelte/store\";\nimport type { Manifest } from \"@commons/types/Nylas\";\n\ntype ManifestAccessor = {\n  component_id: string;\n  access_token?: string;\n  external_manifest_ids?: [];\n};\ntype ManifestStore = Record<string, Promise<Manifest>>;\n\nfunction initialize(): Writable<ManifestStore> {\n  const get = (\n    target: ManifestStore,\n    key: string,\n  ): Promise<Manifest> | void => {\n    const accessor: ManifestAccessor = JSON.parse(key);\n\n    if (!accessor.component_id) return;\n\n    if (!target[key]) {\n      const fetchPromise = fetchManifest(\n        accessor.component_id,\n        accessor.access_token,\n      );\n      store.update((store) => {\n        store[key] = fetchPromise;\n        return store;\n      });\n      target[key] = fetchPromise;\n    }\n    return target[key];\n  };\n  const store = writable(new Proxy<ManifestStore>({}, { get }));\n  return store;\n}\n\nexport const ManifestStore = initialize();\n","import type { Manifest } from \"@commons/types/Nylas\";\n\nexport function getEventDispatcher(component: {\n  dispatchEvent?: (e: Event) => boolean;\n}) {\n  return (name: string, detail: unknown): void => {\n    if (component.dispatchEvent) {\n      component.dispatchEvent(\n        new CustomEvent(name, {\n          detail,\n          composed: true, // propagate across the shadow DOM\n        }),\n      );\n    }\n  };\n}\n\nexport function debounce(\n  fn: (args: unknown) => unknown,\n  time: number,\n): () => void {\n  let timeoutId: number;\n  return (): void => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(fn, time);\n  };\n}\n\nexport function buildInternalProps<T extends Partial<Manifest>>(\n  properties: T,\n  manifest: T,\n  defaultValueMap: T,\n): T {\n  return new Proxy(properties, {\n    get: (target, name: keyof Manifest | \"toJSON\" | \"toString\") => {\n      if (name === \"toString\" || name === \"toJSON\") {\n        return () => JSON.stringify(target);\n      }\n\n      if (Reflect.get(target, name) !== undefined) {\n        return getPropertyValue(\n          Reflect.get(target, name),\n          defaultValueMap[name],\n        );\n      }\n\n      if (manifest && name in manifest) {\n        return getPropertyValue(manifest[name], defaultValueMap[name]);\n      }\n      return defaultValueMap[name];\n    },\n\n    ownKeys: (target) => {\n      const keys = new Set([\n        ...Reflect.ownKeys(target),\n        ...Object.keys(manifest),\n        ...Object.keys(defaultValueMap),\n      ]);\n      return Array.from(keys);\n    },\n\n    getOwnPropertyDescriptor: (target, prop) => {\n      let propDescriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n      if (!propDescriptor) {\n        propDescriptor = (manifest &&\n          Object.getOwnPropertyDescriptor(manifest, prop)) ??\n          (defaultValueMap &&\n            Object.getOwnPropertyDescriptor(defaultValueMap, prop)) ?? {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n          };\n        Reflect.defineProperty(target, prop, propDescriptor);\n      }\n      return propDescriptor;\n    },\n  });\n}\n\nexport function getPropertyValue<T>(propValue: any, defaultTo: T): T {\n  if (propValue) {\n    if (typeof defaultTo === \"boolean\") {\n      return parseBoolean(propValue) as any;\n    }\n    if (typeof defaultTo === \"number\") {\n      return Number(propValue) as any;\n    }\n    if (defaultTo instanceof Date) {\n      return new Date(propValue) as any;\n    }\n  }\n\n  return propValue === undefined ? defaultTo ?? null : propValue;\n}\n\nexport function parseBoolean(\n  val: string | boolean | undefined | null,\n): boolean {\n  return (<any>[true, \"true\", \"1\"]).includes(val);\n}\n\nexport default function parseStringToArray(parseStr: string) {\n  if (!parseStr) {\n    return [];\n  }\n\n  if (parseStr.includes(\",\")) {\n    return parseStr.split(\",\").map((s: string) => s.trim());\n  }\n  if (parseStr.includes(\" \")) {\n    return parseStr.split(\" \").map((s: string) => s.trim());\n  }\n  if (parseStr.includes(\"\\n\")) {\n    return parseStr.split(\"\\n\").map((s: string) => s.trim());\n  }\n\n  return [parseStr.trim()];\n}\n","<svelte:options tag=\"nylas-error\" immutable={true} />\n\n<script lang=\"ts\">\n  import { ErrorStore } from \"../store/error\";\n  import type { NError } from \"@commons/types/Nylas\";\n\n  export let id: string; // component id\n\n  let error: NError;\n  let errorName: string;\n\n  $: {\n    error = $ErrorStore[id] ?? { name: \"\" };\n    errorName = error.name ?? error.message?.name ?? \"\";\n  }\n\n  const isDevEnv =\n    window.location.href.includes(\"localhost\") ||\n    window.location.href.includes(\"127.0.0.1\");\n</script>\n\n<style>\n  .message-container {\n    background: #fff6f6;\n    border-radius: 5px;\n    box-shadow: 0 0 0 1px #aa92a0 inset, 0 0 0 0 transparent;\n    color: #9f3a38;\n    font-size: 1.25rem;\n    padding: 10px;\n    margin: 0 auto;\n    transition: opacity 500ms ease, color 500ms ease,\n      background-color 500ms ease, box-shadow 500ms ease,\n      -webkit-box-shadow 500ms ease;\n  }\n\n  .message-container *:focus {\n    outline: 5px auto Highlight;\n    outline: 5px auto -webkit-focus-ring-color;\n  }\n\n  .details {\n    color: #494949;\n    font-size: 0.75rem;\n    width: 100%;\n  }\n</style>\n\n{#if errorName && isDevEnv}\n  <div class=\"message-container\">\n    {#if errorName === \"HostDomainNotAllowedError\"}\n      <h3>\n        You are trying to access this component from&nbsp;\n        <code>{window.location.hostname}</code>. The component's settings do not\n        allow access from this domain.\n      </h3>\n      <h4>\n        The list of allowed domains can be modified in your&nbsp;\n        <a href=\"https://dashboard.nylas.com\">Dashboard</a>.\n      </h4>\n    {:else if errorName === \"IncompatibleProperties\"}\n      <h3>Your component properties do not work with each other.</h3>\n    {/if}\n    <span class=\"details\">Debug info:</span>\n    <textarea class=\"details\" readonly>\n      {errorName}: {id}\n      {error.message?.message ?? \"\"}\n    </textarea>\n  </div>\n{/if}\n","export const DefaultCustomFields = [\n  {\n    title: \"Your Name\",\n    type: \"text\",\n    required: false,\n  },\n  {\n    title: \"Email Address\",\n    type: \"text\",\n    required: true,\n    placeholder: \"you@example.com\",\n  },\n];\n","export enum NotificationMode {\n  SHOW_MESSAGE = \"show_message\",\n  SEND_MESSAGE = \"send_message\",\n}\n","<svelte:options tag=\"nylas-scheduler\" />\n\n<script lang=\"ts\">\n  import { ManifestStore, sendMessage } from \"@commons\";\n  import { createEvent } from \"@commons/connections/events\";\n  import { get_current_component } from \"svelte/internal\";\n  import {\n    buildInternalProps,\n    getEventDispatcher,\n  } from \"@commons/methods/component\";\n\n  import { DefaultCustomFields } from \"@commons/constants/custom-fields\";\n\n  import type { Manifest, CustomField } from \"@commons/types/Scheduler\";\n  import type { TimeSlot } from \"@commons/types/Availability\";\n  import type { EventQuery, TimespanEvent } from \"@commons/types/Events\";\n  import { NotificationMode } from \"@commons/enums/Scheduler\";\n  import { onMount, tick } from \"svelte\";\n\n  interface BookableSlot extends TimeSlot {\n    recurrence_cadence?:\n      | \"none\"\n      | \"daily\"\n      | \"weekdays\"\n      | \"biweekly\"\n      | \"weekly\"\n      | \"monthly\";\n    recurrence_expiry?: Date | string | undefined;\n    expirySelection: string;\n  }\n\n  // #region props\n  export let id: string = \"\";\n  export let access_token: string = \"\";\n\n  export let booking_label: string;\n  export let custom_fields: CustomField[];\n  export let event_title: string;\n  export let event_description: string;\n  export let event_location: string;\n  export let event_conferencing: string;\n  export let slots_to_book: BookableSlot[];\n  export let notification_mode: NotificationMode;\n  export let notification_message: string;\n  export let notification_subject: string;\n  export let recurrence: \"none\" | \"required\" | \"optional\";\n  export let recurrence_cadence: (\n    | \"none\"\n    | \"daily\"\n    | \"weekdays\"\n    | \"weekly\"\n    | \"biweekly\"\n    | \"monthly\"\n  )[];\n  export let recurrence_expiry: Date | string | null;\n  // #endregion props\n\n  //#region mount and prop initialization\n  const defaultValueMap: Partial<Manifest> = {\n    booking_label: \"Schedule time slots\",\n    custom_fields: DefaultCustomFields,\n    event_title: \"Meeting\",\n    event_description: \"\",\n    event_conferencing: \"\",\n    event_location: \"\",\n    slots_to_book: [],\n    notification_mode: NotificationMode.SHOW_MESSAGE,\n    notification_message: \"Thank you for scheduling!\",\n    notification_subject: \"Invitation\",\n    recurrence: \"none\",\n    recurrence_cadence: [\"none\"],\n  };\n\n  let _this: Manifest = <Manifest>buildInternalProps({}, {}, defaultValueMap);\n  let manifest: Partial<Manifest> = {};\n\n  onMount(async () => {\n    await tick();\n    const storeKey = JSON.stringify({\n      component_id: id,\n      access_token,\n    });\n    manifest = (await $ManifestStore[storeKey]) || {};\n\n    _this = buildInternalProps($$props, manifest, defaultValueMap) as Manifest;\n  });\n\n  let previousProps = $$props;\n  $: {\n    if (JSON.stringify(previousProps) !== JSON.stringify($$props)) {\n      _this = buildInternalProps(\n        $$props,\n        manifest,\n        defaultValueMap,\n      ) as Manifest;\n      previousProps = $$props;\n    }\n  }\n\n  const dispatchEvent = getEventDispatcher(get_current_component());\n  // #endregion mount and prop initialization\n\n  let showSuccessNotification = false;\n\n  $: slotsToBook = _this.slots_to_book.map((slot) => {\n    if (!slot.recurrence_cadence) {\n      if (_this.recurrence === \"required\") {\n        slot.recurrence_cadence = _this.recurrence_cadence[0];\n      } else {\n        slot.recurrence_cadence = \"none\";\n      }\n    }\n    if (!slot.expirySelection) {\n      slot.expirySelection = \"none\";\n    }\n    return slot;\n  });\n  $: if (slotsToBook.length) {\n    showSuccessNotification = false;\n  }\n\n  async function bookTimeSlots(events: BookableSlot[]) {\n    const bookings = events.map(async (event) => {\n      let postableEvent: Partial<TimespanEvent> = {\n        title: _this.event_title,\n        description: _this.event_description,\n        location: _this.event_location,\n        conferencing: _this.event_conferencing\n          ? {\n              provider: \"Zoom Meeting\", // TODO: make this dynamic\n              details: {\n                url: _this.event_conferencing,\n              },\n            }\n          : undefined,\n        participants: event.available_calendars.map((calendar) => {\n          return {\n            email: calendar,\n          };\n        }),\n        calendar_id: event.calendar_id,\n        when: {\n          start_time: event.start_time.getTime() / 1000,\n          end_time: event.end_time.getTime() / 1000,\n        },\n      };\n\n      if (customFieldResponses[\"Email Address\"]) {\n        postableEvent.participants?.push({\n          email: customFieldResponses[\"Email Address\"],\n          name: customFieldResponses[\"Your Name\"],\n        });\n      }\n\n      if (Object.keys(customFieldResponses).length) {\n        postableEvent.metadata = customFieldResponses;\n      }\n\n      if (event.recurrence_cadence && event.recurrence_cadence !== \"none\") {\n        let rrule: string = \"\";\n        if (event.recurrence_cadence === \"daily\") {\n          rrule = \"RRULE:FREQ=DAILY\";\n        } else if (event.recurrence_cadence === \"weekdays\") {\n          rrule = \"RRULE:FREQ=DAILY;BYDAY=MO,TU,WE,TH,FR\";\n        } else if (event.recurrence_cadence === \"weekly\") {\n          rrule = \"RRULE:FREQ=WEEKLY\";\n        } else if (event.recurrence_cadence === \"biweekly\") {\n          rrule = \"RRULE:FREQ=WEEKLY;INTERVAL=2\";\n        } else if (event.recurrence_cadence === \"monthly\") {\n          rrule = \"RRULE:FREQ=MONTHLY\";\n        }\n        // Convert date input to Date type\n        if (typeof event.recurrence_expiry === \"string\") {\n          event.recurrence_expiry = new Date(event.recurrence_expiry as string);\n        }\n        const expiry = _this.recurrence_expiry || event.recurrence_expiry;\n        const expiryInt = Number.parseInt(<string>expiry);\n\n        if (!isNaN(expiryInt)) {\n          rrule += `;COUNT=${expiryInt}`;\n        } else if (expiry instanceof Date) {\n          rrule += `;UNTIL=${expiry\n            .toISOString()\n            .substring(0, 19) // Remove MS from time string\n            .replace(/[^0-9]/g, \"\")}Z`;\n        }\n        postableEvent.recurrence = {\n          rrule: [rrule],\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        };\n      }\n      return createEvent(\n        postableEvent as TimespanEvent,\n        {\n          component_id: id,\n          access_token,\n        } as EventQuery,\n      );\n    });\n    const eventBookings = await Promise.all(bookings);\n\n    dispatchEvent(\"bookedEvents\", {});\n\n    if (_this.notification_mode === NotificationMode.SEND_MESSAGE) {\n      eventBookings.map((event, i) => {\n        console.log(`event ${i}`, event);\n        const event_participants = event.participants?.map((participant) => {\n          const { email, name } = participant;\n          let to: { email: string; name?: string } = { email };\n          if (name) to[\"name\"] = name; // Only assign name if not null, else we get error\n          return to;\n        });\n        if (event_participants) {\n          sendMessage(id, {\n            to: event_participants,\n            body: `${_this.notification_message}`,\n            subject: `${_this.notification_subject}`,\n          });\n        }\n      });\n    } else if (_this.notification_mode === NotificationMode.SHOW_MESSAGE) {\n      showSuccessNotification = true;\n    }\n  }\n\n  // #region custom fields\n  let customFieldResponses: Record<string, any> = {}; // ideally \"any\" would be \"string | boolean\", but text inputs cast to many types\n  $: if (\n    !_this.custom_fields.find((field) =>\n      customFieldResponses.hasOwnProperty(field.title),\n    )\n  ) {\n    customFieldResponses = _this.custom_fields.reduce((responses, field) => {\n      return { ...responses, [field.title]: \"\" };\n    }, {});\n  }\n\n  $: requiredFieldsFilled = _this.custom_fields\n    .filter((field) => field.required)\n    .every(\n      (field) =>\n        customFieldResponses[field.title] !== undefined &&\n        customFieldResponses[field.title] !== \"\",\n    );\n  // #endregion custom fields\n</script>\n\n<style lang=\"scss\">\n  @import \"./styles/scheduler.scss\";\n</style>\n\n<nylas-error {id} />\n<main>\n  <section class=\"booker\">\n    <h2>Your Appointment Bookings</h2>\n    {#if slotsToBook.length}\n      <p>Do you want to book the following?</p>\n      <ul class=\"timeslots\">\n        {#each slotsToBook as timeSlot}\n          <li>\n            <h3>{_this.event_title}: {_this.event_description}</h3>\n            <span class=\"time\"\n              >{timeSlot.start_time.toLocaleTimeString([], {\n                timeStyle: \"short\",\n              })}\n              -\n              {timeSlot.end_time.toLocaleTimeString([], {\n                timeStyle: \"short\",\n              })}</span\n            >\n            <span class=\"date\"\n              >{timeSlot.start_time.toLocaleDateString(\"default\", {\n                dateStyle: \"full\",\n              })}</span\n            >\n            {#if _this.recurrence !== \"none\"}\n              <footer>\n                {#if _this.recurrence === \"optional\"}\n                  <strong>How often should this event repeat?</strong>\n                  <div class=\"cadences\">\n                    <label\n                      class:checked={timeSlot.recurrence_cadence === \"none\"}\n                    >\n                      <input\n                        type=\"radio\"\n                        value=\"none\"\n                        bind:group={timeSlot.recurrence_cadence}\n                      />\n                      <span>never</span>\n                    </label>\n                    {#each _this.recurrence_cadence as cadence}\n                      <label\n                        class:checked={timeSlot.recurrence_cadence === cadence}\n                      >\n                        <input\n                          type=\"radio\"\n                          value={cadence}\n                          bind:group={timeSlot.recurrence_cadence}\n                        />\n                        <span>{cadence}</span>\n                      </label>\n                    {/each}\n                  </div>\n                {:else if _this.recurrence === \"required\"}\n                  <strong>Repeating {timeSlot.recurrence_cadence}</strong>\n                {/if}\n                {#if timeSlot.recurrence_cadence !== \"none\" && !_this.recurrence_expiry}\n                  <strong>Ends</strong>\n                  <div class=\"expiry\">\n                    <label class:checked={timeSlot.expirySelection === \"none\"}>\n                      <input\n                        type=\"radio\"\n                        value=\"none\"\n                        bind:group={timeSlot.expirySelection}\n                      />\n                      <span>never</span>\n                    </label>\n                    <label class:checked={timeSlot.expirySelection === \"after\"}>\n                      <input\n                        type=\"radio\"\n                        value=\"after\"\n                        bind:group={timeSlot.expirySelection}\n                      />\n                      <span>After</span>\n                      {#if timeSlot.expirySelection === \"after\"}\n                        <input\n                          class=\"after\"\n                          type=\"number\"\n                          min=\"1\"\n                          bind:value={timeSlot.recurrence_expiry}\n                        />\n                        <span>occurrences</span>\n                      {/if}\n                    </label>\n                    <label class:checked={timeSlot.expirySelection === \"on\"}>\n                      <input\n                        type=\"radio\"\n                        value=\"on\"\n                        bind:group={timeSlot.expirySelection}\n                      />\n                      <span>On</span>\n                      {#if timeSlot.expirySelection === \"on\"}\n                        <input\n                          type=\"date\"\n                          min={timeSlot.start_time\n                            .toISOString()\n                            .substring(0, 10)}\n                          bind:value={timeSlot.recurrence_expiry}\n                        />\n                      {/if}\n                    </label>\n                  </div>\n                {/if}\n              </footer>\n            {/if}\n          </li>\n        {/each}\n      </ul>\n      {#if _this.custom_fields.length}\n        <div id=\"custom-fields\">\n          {#each _this.custom_fields as field}\n            {#if field.type === \"email\"}\n              <label data-required={field.required}>\n                <strong>{field.title}</strong>\n                <!-- TODO: see if we can make type=\"text\" dynamic for email case. Svelte doesnt care for it as is. -->\n                <input\n                  type=\"email\"\n                  bind:value={customFieldResponses[field.title]}\n                />\n              </label>\n            {:else}\n              <label data-required={field.required}>\n                <strong>{field.title}</strong>\n                <input\n                  type=\"text\"\n                  bind:value={customFieldResponses[field.title]}\n                />\n              </label>\n            {/if}\n          {/each}\n        </div>\n      {/if}\n      <button\n        disabled={!requiredFieldsFilled}\n        title={!requiredFieldsFilled\n          ? \"Please complete all required fields\"\n          : undefined}\n        class=\"book\"\n        on:click={() => bookTimeSlots(slotsToBook)}\n        >{_this.booking_label}</button\n      >\n    {:else}\n      <p>\n        Select timeslots to view event information (You'll be able to review\n        before you book)\n      </p>\n    {/if}\n    {#if showSuccessNotification}\n      <p>{_this.notification_message}</p>\n    {/if}\n  </section>\n</main>\n"],"names":["initialize","__spreadValues"],"mappings":"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"}